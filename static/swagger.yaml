openapi: 3.0.0
info:
  description: API's para al proyecto de Calidad del aire realizadas por Natalia Argote y Juan Camilo Contreras Chacon.
  version: 1.0.0
  title: Calidad del aire API's REST Python Flask - UEB
  contact:
    email: jccontreras@unbosque.edu.co
    url: 'https://jccontreras.com'
servers:
  - url: /calidadaire
tags:
 - name: User Types
   description: Maneja toda la parametrización relacionada con los Tipos de usuario.
 - name: Document Types
   description: Maneja toda la parametrización relacionada con los Tipos de documentos.
 - name: Users
   description: Maneja toda la información relacionada con los usuarios.
 - name: Devices
   description: Maneja toda la información relacionada con los dispositivos.
 - name: Quality Data
   description: Maneja toda la información administrada por los dispositivos calidad del aire.
 - name: Particles
   description: Maneja toda la información relacionada con los tipos de partículas.
 - name: Log Quality Data
   description: Maneja toda la información erronea administrada por los dispositivos calidad del aire.

paths:
  /usertypes:
    post:
      tags:
        - User Types
      summary: Registra un nuevo tipo de usuario en la BD.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userTypesBody'
        required: true
      responses:
        200:
          description: (ok) El Tipo de usuario se registró correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userTypesBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      tags:
        - User Types
      summary: Obtiene los tipos de usuario de la BD.
      responses:
        200:
          description: (ok) Lista de todos los tipos de usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userTypesBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /usertypes/{idusertype}:
    get:
      tags:
        - User Types
      summary: Obtiene un registro de los tipos de usuario de la BD.
      parameters:
        - name: idusertype
          in: path
          description: Identificador del registro
          required: true
          schema:
            type: integer
      responses:
        200:
          description: (ok) Descripción del registro
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userTypesBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /doctypes:
    post:
      tags:
        - Document Types
      summary: Registra un nuevo tipo de documento en la BD.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/docTypesBody'
        required: true
      responses:
        200:
          description: (ok) El Tipo de usuario se registró correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/docTypesBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'
    get:
      tags:
        - Document Types
      summary: Obtiene los tipos de documento de la BD.
      responses:
        200:
          description: (ok) Lista de todos los tipos de documento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/docTypesBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /signup:
    post:
      tags:
        - Users
      summary: Registra un nuevo usuario en la BD.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/usersBody'
        required: true
      responses:
        200:
          description: (ok) El usuario se registró correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /login:
    post:
      tags:
        - Users
      summary: Inicia sesión con datos de la BD. (Activa session en cookies de cliente llamada 'userid')
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginBody'
        required: true
      responses:
        200:
          description: (ok) El usuario se logueo correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /logout:
    get:
      tags:
        - Users
      summary: Finaliza la sesión. (Finaliza session en cookies de cliente llamada 'userid')
      responses:
        200:
          description: (ok) Finalizó la sesión correctamente

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /users:
    get:
      tags:
        - Users
      summary: Obtiene los usuarios de la BD.
      responses:
        200:
          description: (ok) Lista de todos los tipos de documento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'


  /users/{iduser}:
    get:
      tags:
        - Users
      summary: Obtiene un usuario filtrado por id de la BD.
      parameters:
        - name: iduser
          in: path
          description: Identificación del usuario
          required: true
          schema:
            type: string
      responses:
        200:
          description: (ok) Descripción del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - Users
      summary: Elimina un usuario en la BD.
      parameters:
        - name: iduser
          in: path
          description: Identificación del usuario
          required: true
          schema:
            type: string
      responses:
        200:
          description: (ok) El usuario se eliminó correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /users/{iduser}/{state}:
    put:
      tags:
        - Users
      summary: Actualiza un usuario desde perfil de administrador o contraseña desde perfil del usuario en la BD.
      parameters:
        - name: iduser
          in: path
          description: Identificación del usuario.
          required: true
          schema:
            type: string
        - name: state
          in: path
          description: state del update - 0 si es cambio de datos desde el administrador - 1 si es cambio de contraseña desde cada usuario.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/usersBody'
        required: true
      responses:
        200:
          description: (ok) El usuario se actualizó correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /users/selectbytype/{type}:
    get:
      tags:
        - Users
      summary: Obtiene los usuarios filtrados por tipo de usuario de la BD.
      parameters:
        - name: type
          in: path
          description: Tipo de usuario
          required: true
          schema:
            type: integer
      responses:
        200:
          description: (ok) Lista de usuarios seleccionados por tipo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /device:
    post:
      tags:
        - Devices
      summary: Registra un nuevo dispositivo en la BD.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceBody'
        required: true
      responses:
        200:
          description: (ok) El dispositivo se registró correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      tags:
        - Devices
      summary: Obtiene los dispositivos de la BD.
      responses:
        200:
          description: (ok) Lista de todos los dispositivos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /device/{iddevice}:
    get:
      tags:
        - Devices
      summary: Obtiene un dispositivo de la BD.
      parameters:
        - name: iddevice
          in: path
          description: Identificador del dispositivo
          required: true
          schema:
            type: integer
      responses:
        200:
          description: (ok) Descripción del dispositivo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    put:
      tags:
        - Devices
      summary: Actualiza un dispositivo en la BD.
      parameters:
        - name: iddevice
          in: path
          description: Identificador del dispositivo
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deviceBody'
        required: true
      responses:
        200:
          description: (ok) El dispositivo se actualizó correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - Devices
      summary: Elimina un dispositivo en la BD.
      parameters:
        - name: iddevice
          in: path
          description: Identificador del dispositivo
          required: true
          schema:
            type: integer
      responses:
        200:
          description: (ok) El dispositivo se eliminó correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'


  /qualitydata:
    post:
      tags:
        - Quality Data
      summary: Registra los datos de los dispositivos calidad del aire en la BD.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/qualityBody'
        required: true
      responses:
        200:
          description: (ok) Los datos se registrarón correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/qualityBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      tags:
        - Quality Data
      summary: Obtiene los datos brindados por los dispositivos calidad del aire en la BD.
      responses:
        200:
          description: (ok) Lista de toda la información brindada por los dispositivos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/qualityBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /qualitydata/{iddata}:
    get:
      tags:
        - Quality Data
      summary: Obtiene un registro de los datos capturados por los dispositivos de la BD.
      parameters:
        - name: iddata
          in: path
          description: Identificador del registro
          required: true
          schema:
            type: integer
      responses:
        200:
          description: (ok) Descripción del registro
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/qualityBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    put:
      tags:
        - Quality Data
      summary: Actualiza un registro de los datos capturados por los dispositivos de la BD.
      parameters:
        - name: iddata
          in: path
          description: Identificador del registro
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/qualityBody'
        required: true
      responses:
        200:
          description: (ok) El regsitro se actualizó correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/qualityBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - Quality Data
      summary: Elimina un registro de los datos capturados por los dispositivos de la BD.
      parameters:
        - name: iddata
          in: path
          description: Identificador del regsitro
          required: true
          schema:
            type: integer
      responses:
        200:
          description: (ok) El registro se eliminó correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/qualityBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'


  /qualitydata/selectbydevice/{iddevice}:
    get:
      tags:
        - Quality Data
      summary: Obtiene los registros de calidad de aire asociados a un dispositivo especifico de la BD.
      parameters:
        - name: iddevice
          in: path
          description: Identificador del dispositivo
          required: true
          schema:
            type: integer
      responses:
        200:
          description: (ok) Lista de registros asociados a un dispositivo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/qualityBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /qualitydata/selectbyuser/{userid}:
    get:
      tags:
        - Quality Data
      summary: Obtiene los registros de calidad de aire asociados a un usuario especifico de la BD.
      parameters:
        - name: userid
          in: path
          description: Identifición del usuario
          required: true
          schema:
            type: string
      responses:
        200:
          description: (ok) Lista de registros asociados a un dispositivo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/qualityBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /qualitydata/datefilter:
    post:
      tags:
        - Quality Data
      summary: Obtiene los registros de calidad de aire asociados a una fecha especifica de la BD.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/filterDateBody'
        required: true
      responses:
        200:
          description: (ok) Registros Obtenidos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/qualityBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /particles:
    post:
      tags:
        - Particles
      summary: Registra las partículas en la BD.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/particleBody'
        required: true
      responses:
        200:
          description: (ok) La partícula registrarón correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/particleBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      tags:
        - Particles
      summary: Obtiene las partículas en la BD.
      responses:
        200:
          description: (ok) Lista de las partículas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/particleBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /particle/{idpart}:
    get:
      tags:
        - Particles
      summary: Obtiene una partícula de la BD.
      parameters:
        - name: idpart
          in: path
          description: Identificador de la partícula
          required: true
          schema:
            type: integer
      responses:
        200:
          description: (ok) Descripción del registro
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/particleBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    put:
      tags:
        - Particles
      summary: Actualiza una partícula de la BD.
      parameters:
        - name: idpart
          in: path
          description: Identificador de la partícula
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/particleBody'
        required: true
      responses:
        200:
          description: (ok) La partícula se actualizó correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/particleBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - Particles
      summary: Elimina una partícula de la BD.
      parameters:
        - name: idpart
          in: path
          description: Identificador de la partícula
          required: true
          schema:
            type: integer
      responses:
        200:
          description: (ok) La partícula se eliminó correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/particleBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /logqualitydata:
    post:
      tags:
        - Log Quality Data
      summary: Registra los datos erroneos de los dispositivos calidad del aire en la BD.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/qualityBody'
        required: true
      responses:
        200:
          description: (ok) Los datos se registrarón correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/qualityBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      tags:
        - Log Quality Data
      summary: Obtiene los datos erroneos brindados por los dispositivos calidad del aire en la BD.
      responses:
        200:
          description: (ok) Lista de toda la información brindada por los dispositivos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/qualityBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /logqualitydata/{iddata}:
     get:
       tags:
         - Log Quality Data
       summary: Obtiene un registro erroneos de los datos capturados por los dispositivos de la BD.
       parameters:
         - name: iddata
           in: path
           description: Identificador del registro
           required: true
           schema:
             type: integer
       responses:
         200:
           description: (ok) Descripción del registro
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/qualityBody'
         400:
           $ref: '#/components/responses/BadRequest'
         404:
           $ref: '#/components/responses/NotFound'
         500:
           $ref: '#/components/responses/ServerError'

     put:
        tags:
          - Log Quality Data
        summary: Actualiza un registro erroneos de los datos capturados por los dispositivos de la BD.
        parameters:
          - name: iddata
            in: path
            description: Identificador del registro
            required: true
            schema:
              type: integer
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/qualityBody'
          required: true
        responses:
          200:
            description: (ok) El regsitro se actualizó correctamente.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/qualityBody'

          400:
            $ref: '#/components/responses/BadRequest'
          404:
            $ref: '#/components/responses/NotFound'
          500:
            $ref: '#/components/responses/ServerError'

     delete:
        tags:
          - Log Quality Data
        summary: Elimina un registro erroneos de los datos capturados por los dispositivos de la BD.
        parameters:
          - name: iddata
            in: path
            description: Identificador del regsitro
            required: true
            schema:
              type: integer
        responses:
          200:
            description: (ok) El registro se eliminó correctamente.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/qualityBody'

          400:
            $ref: '#/components/responses/BadRequest'
          404:
            $ref: '#/components/responses/NotFound'
          500:
            $ref: '#/components/responses/ServerError'

  /logqualitydata/selectbydevice/{iddevice}:
    get:
      tags:
        - Log Quality Data
      summary: Obtiene los registros de log calidad de aire asociados a un dispositivo especifico de la BD.
      parameters:
        - name: iddevice
          in: path
          description: Identificador del dispositivo
          required: true
          schema:
            type: integer
      responses:
        200:
          description: (ok) Lista de registros log asociados a un dispositivo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/qualityBody'

        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

components:
  responses:
    NotFound:
      description: (NotFound) No se encontró el microservicio.
    BadRequest:
      description: (BadRequest) Los datos enviados son incorrectos o no se envia algún dato obligatorio.
    ServerError:
      description: (ServerError) error en el servidor.

  schemas:
    deviceBody:
      type: object
      properties:
        name:
          type: string
          description: No pueden haber 2 nombres iguales.
        geo:
          type: string
        altitude:
          type: integer

    qualityBody:
      type: object
      properties:
        device:
          type: integer
        pressure:
          type: integer
        id_particle1:
          type: integer
        value_particle1:
          type: integer
        id_particle2:
          type: integer
        value_particle2:
          type: integer
        temp:
          type: integer
        rh:
          type: integer
        date:
          type: string
          description: Debe estar en formato YYYY-MM-DD HH mm ss

    particleBody:
      type: object
      properties:
        name:
          type: string

    userTypesBody:
      type: object
      properties:
        name:
          type: string

    docTypesBody:
      type: object
      properties:
        id:
          type: string
        name:
          type: string

    loginBody:
      type: object
      properties:
        id:
          type: string
        psw:
          type: string

    usersBody:
      type: object
      properties:
        id:
          type: string
          description: Es el número de identificación de la persona.
        idtype:
          type: string
          description: Es el tipo de identificación de la persona.
        name:
          type: string
        email:
          type: string
        cel:
          type: string
        type:
          type: integer
        psw:
          type: string
        device:
          type: integer
        bdate:
          type: string
          description: Debe estar en formato YYYY-MM-DD

    filterDateBody:
      type: object
      properties:
        year:
          type: string
        month:
          type: string
        day:
          type: string
        hour:
          type: string
        min:
          type: string